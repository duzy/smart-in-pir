# $Id$

=begin overview

This is the grammar for smart written as a sequence of Perl 6 rules.

=end overview

=cut

grammar smart::Grammar is PCT::Grammar;

rule TOP {
    {*}					#= enter
    <statement>*
    [ $ || <.panic: 'smart: ** Unsupported Statement'> ]
    {*}					#= leave
}

#token wb { \s }
token ws { <!ww> [ <comment> | \s+ ]* }
token comment { [ '#' '{' <-[ '}' ]>* '}' ] | [ '#' \N* \n? ] }

rule statement {
    | <empty_smart_statement> {*}               #= empty_smart_statement
    | <makefile_variable_declaration> {*}	#= makefile_variable_declaration
    | <makefile_target> {*}                     #= makefile_target
    | <smart_say_statement> {*}			#= smart_say_statement
}

rule empty_smart_statement { <.ws> ';' {*} }

rule makefile_variable_declaration {
    <makefile_variable>
    <makefile_variable_assign>
    <makefile_variable_value_list>
    {*}
}
token makefile_variable {
    [ <-[ ':' '=' '#' \ \t ]> <-[ ':' '=' '#' '+' '?' ]>* ]
    {*}
}
token makefile_variable_assign { '=' | ':=' | '?=' | '+=' }
token makefile_variable_value_list {
    [
      |[ <[ \ \t ]>* \n? ]
      |[
         [ [ <makefile_variable_value_item> <[ \ \t ]>* ]* \\
           [ \n || <.panic: 'smart: ** Suspicious continuation'> ]
         ]+
         [ <makefile_variable_value_item> <[ \ \t ]>* ]*
         [ \n || <.panic: 'smart: ** Expecting a new line'> ]
       ]
      |[ [ <makefile_variable_value_item> <[ \ \t ]>* ]*
         [ \n || <.panic: 'smart: ** Expecting end of line'> ]
       ]
    ] {*}
}
token makefile_variable_value_item { <-[ \\ \n \ \t ]>+ {*} }

token makefile_target {
    <makefile_target_name> \s* ':' <[ \ \t ]>*
    [
     |[ ';' <[ \ \t ]>* <makefile_target_action>* ]
     |[ \n \t <makefile_target_action> ]*
    ]
    {*}
}
token makefile_target_name { <-[ : \n ]>+ {*} }
token makefile_target_action { <-[ \n ]>* {*} }

rule smart_say_statement {
    # used to output some messages.
    'say' <expression> [ ',' <expression> ]*
    [ ';' || <.panic: 'smart: ** Unterminated statement'> ]
    {*}
}

##  terms
token term {
    | <value> {*}                                #= value
    | <makefile_variable_method_call> {*}        #= makefile_variable_method_call
    | <makefile_variable_ref> {*}		 #= makefile_variable_ref
}

rule value {
    | <integer> {*}                              #= integer
    | <quote> {*}                                #= quote
}

rule integer { \d+ {*} }

rule quote {
    [ \' <string_literal: '\'' > \' | \" <string_literal: '"' > \" ]
    {*}
}

rule makefile_variable_method_call {
    <makefile_variable_ref> '.' <ident>
        '(' [ <expression> [ ',' <expression> ]* ]?
        [ ')' || <.panic: "smart: ** Require an ')' to terminate parameter list"> ]
    {*}
}

rule makefile_variable_ref {
    | <makefile_variable_ref1> {*}	#= makefile_variable_ref1
    | <makefile_variable_ref2> {*}	#= makefile_variable_ref2
}
rule makefile_variable_ref1 {
    '$'
    [ '(' <makefile_variable_name1>
    [ ')' || <.panic: "smart: ** Makefile variable-referencing expects ')'"> ]]
    {*}
}
rule makefile_variable_ref2 {
    '$'
    [ '{' <makefile_variable_name2>
    [ '}' || <.panic: "smart: ** Makefile variable-referencing expects '}'"> ]]
    {*}
}
token makefile_variable_name1 { <-[')']>+ }
token makefile_variable_name2 { <-['}']>+ }

rule expression is optable { ... }



######################################################################
##  expressions and operators
proto 'term:'     is precedence('=')     is parsed(&term)      { ... }

## multiplicative operators
proto infix:<*>   is looser(term:)       is pirop('mul')     { ... }
proto infix:</>   is equiv(infix:<*>)    is pirop('div')     { ... }

## additive operators
proto infix:<+>   is looser(infix:<*>)   is pirop('add')     { ... }
proto infix:<->   is equiv(infix:<+>)    is pirop('sub')     { ... }
######################################################################

