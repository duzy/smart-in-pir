# $Id$

=begin overview

This is the grammar for smart written as a sequence of Perl 6 rules.

=end overview

=cut

grammar smart::Grammar is PCT::Grammar;

rule TOP {
    <statement>*
    [ $ || <.panic: 'Syntax error'> ]
    {*}
}

##  this <ws> rule treats # as "comment to eol"
##  you may want to replace it with something appropriate
token ws {
    <!ww>
    [ <comment> | \s+ ]*
}

token comment { [ '#' '{' <-['}']>* '}' ] | [ '#' \N* \n? ] }

rule statement {
    | <makefile_variable_declaration> {*}	#= makefile_variable_declaration
    | <smart_say_statement> {*}			#= smart_say_statement
}

rule makefile_variable_declaration {
    <makefile_variable> [ '=' | ':=' ] <makefile_variable_value_list>
    {*}
}

token makefile_variable {
    <-[ : = '#' ' ' \t ]> <-[ : = '#' ]>*
}
#token makefile_variable_value_list {
#    [ <makefile_variable_value_item>* \\
#      [\n || <.panic: 'Suspicious continuation'>]
#    ]*
#    <makefile_variable_value_item>*
#}
token makefile_variable_value_list {
    [ <-[\\ \n]>* \\ [\n || <.panic: 'Suspicious continuation'>] ]*
    \N*
}
token makefile_variable_value_item { <-[\\ \n]>+ }

rule smart_say_statement {
    # used to output some messages.
    'say' <expression> [ ',' <expression> ]* ';'
    {*}
}

##  terms
token term {
    | <value> {*}                                #= value
}

rule value {
    | <integer> {*}                              #= integer
    | <quote> {*}                                #= quote
}

rule integer { \d+ {*} }

rule quote {
    [ \' <string_literal: '\'' > \' | \" <string_literal: '"' > \" ]
    {*}
}

rule expression is optable { ... }



######################################################################
##  expressions and operators
proto 'term:'     is precedence('=')     is parsed(&term)      { ... }

## multiplicative operators
proto infix:<*>   is looser(term:)       is pirop('mul')     { ... }
proto infix:</>   is equiv(infix:<*>)    is pirop('div')     { ... }

## additive operators
proto infix:<+>   is looser(infix:<*>)   is pirop('add')     { ... }
proto infix:<->   is equiv(infix:<+>)    is pirop('sub')     { ... }
######################################################################

